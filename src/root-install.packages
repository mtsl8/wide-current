 - - - the latter part of this is written for using modern nvidia drivers, but the first part is the same for all - - -
 
## unless clearly defined in the present script, generally assume that $values are to be replaced by your personal values.
## variables included: $Region $City $user $pass $hostname

## intended file contents surrounded by ```triple backticks```

#partition
#format/label
#mount
#dhcpcd/ping

~~~ basestrap /mnt:

base base-devel runit elogind-runit

linux-zen linux-firmware intel-ucode

~~~

fstabgen -U /mnt >> /mnt/etc/fstab && artix-chroot /mnt

~~~ pacman -S:

nano sudo

grub efibootmgr

dhcpcd connman-runit

nftables-runit firewalld-runit

alsa-utils-runit

~~~ chroot.sh:

ln -sf /usr/share/zoneinfo/$Region/$City /etc/localtime
hwclock --systohc
nano /etc/locale.gen 
# page down, uncomment: en_US.UTF-8
locale-gen
nano /etc/locale.conf
```
export LANG="en_US.UTF-8"
export LC_COLLATE="C"
```
grub-install --target=x86_64-efi --efi-directory=/efi --bootloader=grub
# for BIOS/MBR: grub-install --target=i386-pc $HD
grub-mkconfig -o /boot/grub/grub.cfg
passwd
useradd -m $user
passwd $user
gpasswd -a $user wheel
EDITOR="nano" visudo
# uncomment line allowing wheel (with password)
## note: the finer grain of control used in the sudo file the better for security
## in some cases creating utility users limited to specific tasks is a useful strategy
## (an alternative to sudo is doas, but there are a lot of things which use sudo, so...)
nano /etc/hostname
```
$hostname
```
# nano /etc/hosts
```
127.0.0.1 localhost
::1 localhost 
127.0.1.1 $hostname.localdoman $hostname
```
ln -s /etc/runit/sv/connmand /etc/runit/runsvdir/default
ln -s /etc/runit/sv/nftables /etc/runit/runsvdir/default
ln -s /etc/runit/sv/firewalld /etc/runit/runsvdir/default
# ^patch: add ">/dev/null" before "2&>1" in "/etc/runit/sv/firewalld/run" file to remove annoying text at login. 
## note: there is probably a better way to do that, and not necessary with display manager
ln -s /etc/runit/sv/alsa /etc/runit/runsvdir/default

nano /home/$user/.bashrc
```
alias pagman="sudo pacman -S"
alias grubpdate="sudo grub mkconfig -o /boot/grub/grub.cfg"
```

~~~ the system is now stable!
~~~ reboot, login, then install:

man-db man-pages

pacman-contrib pkgfile

# run "pkgfile --update" at any time to refresh the database.

libedit llvm-libs

python dkms

linux-zen-headers

~~~

cairo mesa

mesa-vdpau libva-mesa-driver

wayland egl-wayland

libinput libepoxy

- - - if you are using a different graphics card, this it where it starts to be different; - - -
# xorg-server may not be needed depending on what environment and applications are desired
# wayland is a more modern protocol, and xwayland can supplement; 
# it depends on xorg-server-common instead, a small library.

xorg-server

nvidia-utils

nvidia-dkms

~~~ config.sh:

# /etc/pacman.d/hooks/nvidia.hook ~ (https://wiki.archlinux.org/title/NVIDIA#pacman_hook)

# /etc/mkinitcpio.conf ~ (MODULES=(... nvidia nvidia_modeset nvidia_uvm nvidia_drm ...)
mkinitcpio -P

# cat /sys/devices/platform/efi-framebuffer.0/depth
# look at the monitor menu and match height and width exactly
## alternatively use ddcutil slightly later in the process..

### todo: add numlock support

# /etc/default/grub :
# ~ (GRUB_GFXMODE="$width"x"$height"x"$depth",auto)
# ~ (GRUB_CMDLINE_LINUX_DEFAULT="... nvidia-drm.modeset=1 ..."
grub-mkconfig -o /boot/grub/grub.cfg

# /etx/X11/xorg.conf.d/20-nvidia.conf
```
Section "Device"
        Identifier "Nvidia Card"
        Driver "nvidia"
        VendorName "NVIDIA Corporation"
        BoardName "GeForce GTX 1050 Ti"
        Option "NoLogo" "1"
        Option "ConnectedMonitor" "DFP"
EndSection
```

## (taken from [nvidia-tweaks](https://aur.archlinux.org/cgit/aur.git/tree/nvidia.conf?h=nvidia-tweaks) AUR package)
## if the security risk of not zeroing ex-kernel ram is less bad than waiting for it to happen, HARDENED=0
## if your motherboard and GPU support PCI v3, PCI3=1

# /usr/lib/modprobe.d/nvidia.conf
```
options nvidia NVreg_UsePageAttributeTable=1 NVreg_InitializeSystemMemoryAllocations=$HARDENED NVreg_EnablePCIeGen3=$PCI3
options nvidia_drm modeset=1
```
